#VRML V2.0 utf8


WorldInfo 
{
	title "Multi Leaf shader test - vertex displacment "

	info 
	[
		"Scripts creates N randomized instances of a leaf"
	    "this gives better performance then N separate indexedFaceSets+ Transform" 
		" coordinates animated in vertex shader "
		" by a bit of sinus along y and noise"
		"Leaf (c) by Shane shaneca@mindspring.com"
		"(c) 2004 HG hg@snafu.de"
		"updated to DX11 hlsl shader"
		"options:relativeTime=true,wwwProgress=true,maxVertexCount=16000"
	    
	]

}

Viewpoint 
{
    position     -0.094 6.106 51.498
    orientation  0.000 1.000 0.000 0.008
    fieldOfView  0.9
	description	"Entry"

}
Viewpoint 
{
    position     -38.532 6.106 47.386
    orientation  0.000 -1.000 0.000 0.740
    fieldOfView  1.100
	description	"other"

}

Viewpoint 
{
    position     16.757 23.432 25.586
    orientation  -0.651 0.734 0.194 0.775
    fieldOfView  0.844
	description	"2"
}

EXTERNPROTO Fog2[
	exposedField SFColor color
	exposedField SFString fogType
	exposedField SFFloat visibilityRange
	exposedField SFFloat visibilityStart
	exposedField SFFloat density
	exposedField SFBool radial
	eventIn SFBool set_bind
	eventOut SFBool isBound
	]
["urn:inet:bitmanagement.de:node:Fog2","http://www.bitmanagement.de/vrml/protos/nodes.wrl#Fog2","nodes.wrl#Fog2"]
EXTERNPROTO Selection[
	exposedField SFVec3f bboxSize
	exposedField SFVec3f bboxCenter
	exposedField SFNode metadata
	exposedField SFBool collide
	exposedField SFBool select
	exposedField SFNode proxy
	exposedField MFNode children
	eventIn MFNode addChildren
	eventIn MFNode removeChildren
	]
["urn:inet:bitmanagement.de:node:Selection","http://www.bitmanagement.de/vrml/protos/nodes.wrl#Selection","nodes.wrl#Selection"]



Fog2	{
	visibilityStart	50
	visibilityRange	100
	fogType	"LINEAR"
	radial TRUE
	color 0.0 0.1 0.0 
}

Background {
	groundAngle	[ 
		1.2, 1.5, 1.57 ]
	groundColor	[ 0 0 0,
	    0 0 0,
	    .3 .3 .3,
	    .4 .4 .4 ]
	skyAngle	[ 1.2, 1.5, 1.57 ]
	skyColor	[ 
		.3 .3 .2,
	    0 0 0,
	    .38 .28 .28,
	    .62 .42 .42 ]
}

Switch	{
	whichChoice	-1
	choice [
			DEF ComposedShaderGlowDX11 ComposedShader {

					exposedField SFTime time 0

				language "HLSL"
				parts [
					ShaderPart {
						type "VERTEX"
						url "hlsl://hlsl:4.1 BSContact Shader Generator: numLights=1 numTextures=0 lightingEnable=1 specularEnable=1 doubleSidedEnable=1 fogEnable=1 vertexLighting=1 pixelLighting=0 vertexColor=0 numTextureCoord=1


	float time : TIME <string UIWidget=\"None\";> = 0;

cbuffer ModelViewProjectionConstantBuffer {
float4x4 World				    	: WORLD;
float4x4 View						: VIEW;
float4x4 Projection					: PROJECTION;
float4x4 WorldView                	: WORLDVIEW;
float4x4 WorldViewProjection      	: WORLDVIEWPROJECTION;
float4x4 WorldViewInverseTranspose	: worldViewInverseTranspose;
};
float4 FogColor				: fogColor;
float4 FogParam				: fogParam;

struct Material
{
	float4 diffuseColor;
	float4 ambientColor;
	float4 specularColor;
	float4 emissiveColor;
	float power;
};
cbuffer MaterialConstantBuffer {
Material material  : MATERIAL;
};

struct Light
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 positionView;
	float4 directionView;
	float4 attenuation;
	float4 spot;
};
cbuffer LightsConstantBuffer {
Light light[1] 	: LIGHT;
};
float4 AmbientLightColor         	: ambientLightColor;
float3 LambertLighting(float3 lightNormal,float3 surfaceNormal,float3 lightColor)
{
	float diffuseAmount = saturate(dot(lightNormal, surfaceNormal));
	float3 diffuse = diffuseAmount * lightColor;
	return diffuse;
}
float3 SpecularContribution(float3 toEye,float3 lightNormal,float3 surfaceNormal,float materialSpecularPower,float lightSpecularIntensity,float3 lightColor)
{
	float3 vHalf = normalize(lightNormal + toEye);
	float specularAmount = saturate(dot(surfaceNormal, vHalf));
	specularAmount = pow(specularAmount, max(materialSpecularPower,0.0001f)) * lightSpecularIntensity;
	float3 specular = lightColor * specularAmount;
	return specular;
}
float DistanceAttenuation(float distance,float4 attenuation)
{
	if (distance >= attenuation.w)  {  return 0.f; }
	else { return 1.f/(attenuation.x + attenuation.y*distance + attenuation.z*distance*distance);  }
}

void ApplyFog(inout float4 color, float fogFactor)
{
	color.rgb = lerp(FogColor.rgb, color.rgb, fogFactor);
}


					/*********************************************************************NVMH3****
					noise stuff from noise.fx

					Comments:
					HLSL noise implementation for vertex program profile

					This is based on Perlin's original code:
					http://mrl.nyu.edu/~perlin/doc/oscar.html
					& Thanks to Simon Green - KB

					It combines the permutation and gradient tables into one array of
					float4's to conserve constant memory.
					The table is duplicated twice to avoid modulo operations.

					Notes:
					Should use separate tables for 1, 2 and 3D versions

					******************************************************************************/

					// vnoise-table.fxh
					// NOISE TABLE, seed value: 0 /////////////////////

					#define BSIZE 32
					#define FULLSIZE 66
					#define NOISEFRAC 0.03125

					static const float4 NTab[66] = {-0.854611,-0.453029,0.25378,0,
						-0.84528,-0.456307,-0.278002,1,
						-0.427197,0.847095,-0.316122,2,
						0.670266,-0.496104,0.551928,3,
						-0.675674,-0.713842,0.184102,4,
						-0.0373602,-0.600265,0.798928,5,
						-0.939116,-0.119538,0.322135,6,
						0.818521,0.278224,0.502609,7,
						0.105335,-0.765291,0.635007,8,
						-0.634436,-0.298693,0.712933,9,
						-0.532414,-0.603311,-0.593761,10,
						0.411375,0.0976618,0.906219,11,
						0.798824,-0.416379,-0.434175,12,
						-0.691156,0.585681,-0.423415,13,
						0.612298,0.0777332,0.786797,14,
						0.264612,-0.262848,0.927842,15,
						-0.70809,0.0548396,-0.703989,16,
						0.933195,-0.294222,-0.206349,17,
						0.788936,-0.466718,-0.399692,18,
						-0.540183,-0.824413,0.168954,19,
						0.469322,-0.184125,0.863617,20,
						-0.84773,0.292229,-0.44267,21,
						0.450832,0.650314,-0.611427,22,
						0.906378,-0.247125,-0.342647,23,
						-0.995052,0.0271277,-0.0955848,24,
						-0.0252277,-0.778349,0.627325,25,
						0.991428,0.128623,0.0229457,26,
						-0.842581,-0.290688,0.453384,27,
						-0.662511,-0.500545,-0.557256,28,
						0.650245,-0.692099,-0.313338,29,
						0.636901,0.768918,-0.0558766,30,
						-0.437006,0.872104,-0.220138,31,
						-0.854611,-0.453029,0.25378,0,
						-0.84528,-0.456307,-0.278002,1,
						-0.427197,0.847095,-0.316122,2,
						0.670266,-0.496104,0.551928,3,
						-0.675674,-0.713842,0.184102,4,
						-0.0373602,-0.600265,0.798928,5,
						-0.939116,-0.119538,0.322135,6,
						0.818521,0.278224,0.502609,7,
						0.105335,-0.765291,0.635007,8,
						-0.634436,-0.298693,0.712933,9,
						-0.532414,-0.603311,-0.593761,10,
						0.411375,0.0976618,0.906219,11,
						0.798824,-0.416379,-0.434175,12,
						-0.691156,0.585681,-0.423415,13,
						0.612298,0.0777332,0.786797,14,
						0.264612,-0.262848,0.927842,15,
						-0.70809,0.0548396,-0.703989,16,
						0.933195,-0.294222,-0.206349,17,
						0.788936,-0.466718,-0.399692,18,
						-0.540183,-0.824413,0.168954,19,
						0.469322,-0.184125,0.863617,20,
						-0.84773,0.292229,-0.44267,21,
						0.450832,0.650314,-0.611427,22,
						0.906378,-0.247125,-0.342647,23,
						-0.995052,0.0271277,-0.0955848,24,
						-0.0252277,-0.778349,0.627325,25,
						0.991428,0.128623,0.0229457,26,
						-0.842581,-0.290688,0.453384,27,
						-0.662511,-0.500545,-0.557256,28,
						0.650245,-0.692099,-0.313338,29,
						0.636901,0.768918,-0.0558766,30,
						-0.437006,0.872104,-0.220138,31,
						-0.854611,-0.453029,0.25378,0,
						-0.84528,-0.456307,-0.278002,1};



					///////////// functions 

					// this is the smoothstep function f(t) = 3t^2 - 2t^3, without the normalization
					float3 s_curve(float3 t) { return t*t*( float3(3,3,3) - float3(2,2,2)*t); }
					float2 s_curve(float2 t) { return t*t*( float2(3,3) - float2(2,2)*t); }
					float  s_curve(float  t) { return t*t*(3.0-2.0*t); }

					// 3D version
					float noise(float3 v,
					const uniform float4 pg[FULLSIZE])
					{
    					v = v + float3(10000.0f, 10000.0f, 10000.0f);   // hack to avoid negative numbers

    					float3 i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    					float3 f = frac(v);            // fractional position

    					// lookup in permutation table
    					float2 p;
    					p.x = pg[ i[0]     ].w;
    					p.y = pg[ i[0] + 1 ].w;
    					p = p + i[1];

    					float4 b;
    					b.x = pg[ p[0] ].w;
    					b.y = pg[ p[1] ].w;
    					b.z = pg[ p[0] + 1 ].w;
    					b.w = pg[ p[1] + 1 ].w;
    					b = b + i[2];

    					// compute dot products between gradients and vectors
    					float4 r;
    					r[0] = dot( pg[ b[0] ].xyz, f );
    					r[1] = dot( pg[ b[1] ].xyz, f - float3(1.0f, 0.0f, 0.0f) );
    					r[2] = dot( pg[ b[2] ].xyz, f - float3(0.0f, 1.0f, 0.0f) );
    					r[3] = dot( pg[ b[3] ].xyz, f - float3(1.0f, 1.0f, 0.0f) );

    					float4 r1;
    					r1[0] = dot( pg[ b[0] + 1 ].xyz, f - float3(0.0f, 0.0f, 1.0f) );
    					r1[1] = dot( pg[ b[1] + 1 ].xyz, f - float3(1.0f, 0.0f, 1.0f) );
    					r1[2] = dot( pg[ b[2] + 1 ].xyz, f - float3(0.0f, 1.0f, 1.0f) );
    					r1[3] = dot( pg[ b[3] + 1 ].xyz, f - float3(1.0f, 1.0f, 1.0f) );

    					// interpolate
    					f = s_curve(f);
    					r = lerp( r, r1, f[2] );
    					r = lerp( r.xyyy, r.zwww, f[1] );
    					return lerp( r.x, r.y, f[0] );
					}

					// 2D version
					float noise(float2 v,
					const uniform float4 pg[FULLSIZE])
					{
    					v = v + float2(10000.0f, 10000.0f);

    					float2 i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    					float2 f = frac(v);            // fractional position

    					// lookup in permutation table
    					float2 p;
    					p[0] = pg[ i[0]   ].w;
    					p[1] = pg[ i[0]+1 ].w;
    					p = p + i[1];

    					// compute dot products between gradients and vectors
    					float4 r;
    					r[0] = dot( pg[ p[0] ].xy,   f);
    					r[1] = dot( pg[ p[1] ].xy,   f - float2(1.0f, 0.0f) );
    					r[2] = dot( pg[ p[0]+1 ].xy, f - float2(0.0f, 1.0f) );
    					r[3] = dot( pg[ p[1]+1 ].xy, f - float2(1.0f, 1.0f) );

    					// interpolate
    					f = s_curve(f);
    					r = lerp( r.xyyy, r.zwww, f[1] );
    					return lerp( r.x, r.y, f[0] );
					}

					// 1D version
					float noise(float v,
					const uniform float4 pg[FULLSIZE])
					{
    					v = v + 10000.0f;

    					float i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    					float f = frac(v);            // fractional position

    					// compute dot products between gradients and vectors
    					float2 r;
    					r[0] = pg[i].x * f;
    					r[1] = pg[i + 1].x * (f - 1.0f);

    					// interpolate
    					f = s_curve(f);
    					return lerp( r[0], r[1], f);
					}

					//////////////////////////////////////////////////////////////

					static const
					float4x4 NoiseMatrix = {1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1};

struct VSIn
{
	float3 Position  	: POSITION;
	float3 Normal    	: NORMAL;
	float2 Texture0 	: TEXCOORD0;
};

struct VSOut
{
	float4 Position : SV_POSITION;
	float4 Diffuse 	: COLOR0;
	float4 Specular	: COLOR1;
	float  FogFactor : FOG	;
	float2 Texture0	: TEXCOORD0;
};


VSOut VS(VSIn input)
{
	VSOut output = (VSOut)0.0;

 						//float displacement = abs(sin(6.28 * (0.01*TexCoord.y)));
						float4 noisePos = mul(input.Position +time*2,NoiseMatrix);
						float noiseVal =noise(noisePos.xyz, NTab);
						//noiseVal=1;
  
						//float displacement = glowThickness*(noise(noisePos.xyz, NTab) + 1.0f);
						//float displacement = glowThickness*(noise(TexCoord.xy, NTab) + 1.0f);
						//float displacement=glowThickness;

						// t : leaf height
						float t= input.Position.y / 12.0;

						//float displacement = 2*sin(6.2828 * (time+t));
						float displacement = max(0.01,t)*2*sin(0.5*6.2828 * (time+pow(t,1.5)));

						displacement+=noiseVal;

				
						//displacement = displacement - 0.5; // mm makes flip here 
    					//displacement = sign(displacement) * pow(displacement,Sharpness);

    					float3 N = normalize(mul(input.Normal,(float3x3)WorldViewInverseTranspose)); // normalize(mul(Normal, (float3x3)modelViewT));		// normal (view space)

						float3 displace =  (displacement) * N;
						//float3 displace = float3(displacement,0,0);
						//float3 displace = displacement*float3(noiseVal,0,0);

						float3 positionView = mul(float4(input.Position, 1), WorldView) + displace;  // displaced position (view space)
						output.Position = mul(float4(positionView, 1), Projection );   // projected position



	//output.Position = mul(float4(input.Position,1.0),WorldViewProjection);
	//float3 positionView = mul(float4(input.Position,1.0),WorldView);

	float3 eyeVector = normalize(-positionView);
	float3 normal = N;
	output.Texture0	 = input.Texture0;
	normal=faceforward(normal,-eyeVector,normal);
	float3 diffuse = 0.0f;
	float3 specular = 0.0f;
	float4 materialDiffuse = material.diffuseColor.rgba;
	{
	float3 lightDirection = -light[0].directionView.xyz;
	float fAtten = 1.f;
	diffuse+=fAtten*LambertLighting(lightDirection,normal,light[0].diffuseColor.rgb);
	specular+=fAtten*SpecularContribution(eyeVector,lightDirection,normal,material.power,1.0f,light[0].specularColor.rgb);
	}
	output.Diffuse = float4(material.ambientColor.rgb * AmbientLightColor.rgb+saturate(diffuse)*materialDiffuse.rgb+material.emissiveColor.rgb,materialDiffuse.a);
	output.Specular = float4(saturate(specular)* material.specularColor.rgb,0.0f);
	float d=length(positionView);
	output.FogFactor = saturate((FogParam.y - d)/(FogParam.y - FogParam.x));
	return output;
}

"
					}
					
					ShaderPart {
						type "FRAGMENT"
						url "hlsl://hlsl:4.1 BSContact Shader Generator:
float4 FogColor				: fogColor;
float4 FogParam				: fogParam;


void ApplyFog(inout float4 color, float fogFactor)
{
	color.rgb = lerp(FogColor.rgb, color.rgb, fogFactor);
}


struct PSIn
{
	float4 sv_position	: SV_POSITION;
	float4 Diffuse  	: COLOR0;
	float4 Specular 	: COLOR1;
	float  FogFactor : FOG	;
	float2 Texture0	: TEXCOORD0;
};


float4 PS(in PSIn input) : SV_TARGET
{
	float4 color;
	color=input.Diffuse;
	color+=input.Specular;
	ApplyFog(color,input.FogFactor);
	return color;
}
"
					}
				]
			}		
		
		
		
		
		DEF ComposedShaderGlowDX9 ComposedShader 
		{



			exposedField SFTime time 0
			exposedField SFVec3f lightDir 1 0 0

			language "HLSL"
			
			parts [
			  
			    DEF VertexShaderGlow ShaderPart 
				{

					type "VERTEX"

					# any needed parameters can be mapped to fields here 


					#exposedField SFTime time 0
					#exposedField SFVec3f lightDir 1 0 0
			
					#field SFVec3f  lightDir	 0.577 -0.577 0.577


					url "hlsl:	
					// light direction (view space)
					float3 lightDir <  string UIDirectional = \"Light Direction\"; > = {0.577, -0.577, 0.577};
					float time : TIME <string UIWidget=\"None\";> = 0;


					// light intensity
					float4 I_a : LIGHTAMBIENT  = { 0.1f, 0.1f, 0.1f, 1.0f };    // ambient
					float4 I_d : LIGHTDIFFUSE  = { 1.0f, 1.0f, 1.0f, 1.0f };    // diffuse
					float4 I_s : LIGHTSPECULAR = { 1.0f, 1.0f, 1.0f, 1.0f };    // specular


					// material reflectivity
					float4 k_a : MATERIALAMBIENT = { 1.0f, 1.0f, 1.0f, 1.0f };    // ambient
					float4 k_d : MATERIALDIFFUSE = { 0.23f, 0.39f, 0.19f, 1.0f };    // diffuse
					float4 k_s : MATERIALSPECULAR= { 0.2f, 0.3f, 0.29f, 1.0f };    // specular
					float  n   : MATERIALPOWER = 32.0f;                           // power

					// state transformations

					float4x4 modelViewProjectionT : WORLDVIEWPROJECTION;
					float4x4 modelViewT 		  : WORLDVIEW;
					float4x4 projectionT		  : PROJECTION;

					/*********************************************************************NVMH3****
					noise stuff from noise.fx

					Comments:
					HLSL noise implementation for vertex program profile

					This is based on Perlin's original code:
					http://mrl.nyu.edu/~perlin/doc/oscar.html
					& Thanks to Simon Green - KB

					It combines the permutation and gradient tables into one array of
					float4's to conserve constant memory.
					The table is duplicated twice to avoid modulo operations.

					Notes:
					Should use separate tables for 1, 2 and 3D versions

					******************************************************************************/

					// vnoise-table.fxh
					// NOISE TABLE, seed value: 0 /////////////////////

					#define BSIZE 32
					#define FULLSIZE 66
					#define NOISEFRAC 0.03125

					const float4 NTab[66] = {-0.854611,-0.453029,0.25378,0,
						-0.84528,-0.456307,-0.278002,1,
						-0.427197,0.847095,-0.316122,2,
						0.670266,-0.496104,0.551928,3,
						-0.675674,-0.713842,0.184102,4,
						-0.0373602,-0.600265,0.798928,5,
						-0.939116,-0.119538,0.322135,6,
						0.818521,0.278224,0.502609,7,
						0.105335,-0.765291,0.635007,8,
						-0.634436,-0.298693,0.712933,9,
						-0.532414,-0.603311,-0.593761,10,
						0.411375,0.0976618,0.906219,11,
						0.798824,-0.416379,-0.434175,12,
						-0.691156,0.585681,-0.423415,13,
						0.612298,0.0777332,0.786797,14,
						0.264612,-0.262848,0.927842,15,
						-0.70809,0.0548396,-0.703989,16,
						0.933195,-0.294222,-0.206349,17,
						0.788936,-0.466718,-0.399692,18,
						-0.540183,-0.824413,0.168954,19,
						0.469322,-0.184125,0.863617,20,
						-0.84773,0.292229,-0.44267,21,
						0.450832,0.650314,-0.611427,22,
						0.906378,-0.247125,-0.342647,23,
						-0.995052,0.0271277,-0.0955848,24,
						-0.0252277,-0.778349,0.627325,25,
						0.991428,0.128623,0.0229457,26,
						-0.842581,-0.290688,0.453384,27,
						-0.662511,-0.500545,-0.557256,28,
						0.650245,-0.692099,-0.313338,29,
						0.636901,0.768918,-0.0558766,30,
						-0.437006,0.872104,-0.220138,31,
						-0.854611,-0.453029,0.25378,0,
						-0.84528,-0.456307,-0.278002,1,
						-0.427197,0.847095,-0.316122,2,
						0.670266,-0.496104,0.551928,3,
						-0.675674,-0.713842,0.184102,4,
						-0.0373602,-0.600265,0.798928,5,
						-0.939116,-0.119538,0.322135,6,
						0.818521,0.278224,0.502609,7,
						0.105335,-0.765291,0.635007,8,
						-0.634436,-0.298693,0.712933,9,
						-0.532414,-0.603311,-0.593761,10,
						0.411375,0.0976618,0.906219,11,
						0.798824,-0.416379,-0.434175,12,
						-0.691156,0.585681,-0.423415,13,
						0.612298,0.0777332,0.786797,14,
						0.264612,-0.262848,0.927842,15,
						-0.70809,0.0548396,-0.703989,16,
						0.933195,-0.294222,-0.206349,17,
						0.788936,-0.466718,-0.399692,18,
						-0.540183,-0.824413,0.168954,19,
						0.469322,-0.184125,0.863617,20,
						-0.84773,0.292229,-0.44267,21,
						0.450832,0.650314,-0.611427,22,
						0.906378,-0.247125,-0.342647,23,
						-0.995052,0.0271277,-0.0955848,24,
						-0.0252277,-0.778349,0.627325,25,
						0.991428,0.128623,0.0229457,26,
						-0.842581,-0.290688,0.453384,27,
						-0.662511,-0.500545,-0.557256,28,
						0.650245,-0.692099,-0.313338,29,
						0.636901,0.768918,-0.0558766,30,
						-0.437006,0.872104,-0.220138,31,
						-0.854611,-0.453029,0.25378,0,
						-0.84528,-0.456307,-0.278002,1};



					///////////// functions 

					// this is the smoothstep function f(t) = 3t^2 - 2t^3, without the normalization
					float3 s_curve(float3 t) { return t*t*( float3(3,3,3) - float3(2,2,2)*t); }
					float2 s_curve(float2 t) { return t*t*( float2(3,3) - float2(2,2)*t); }
					float  s_curve(float  t) { return t*t*(3.0-2.0*t); }

					// 3D version
					float noise(float3 v,
					const uniform float4 pg[FULLSIZE])
					{
    					v = v + float3(10000.0f, 10000.0f, 10000.0f);   // hack to avoid negative numbers

    					float3 i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    					float3 f = frac(v);            // fractional position

    					// lookup in permutation table
    					float2 p;
    					p.x = pg[ i[0]     ].w;
    					p.y = pg[ i[0] + 1 ].w;
    					p = p + i[1];

    					float4 b;
    					b.x = pg[ p[0] ].w;
    					b.y = pg[ p[1] ].w;
    					b.z = pg[ p[0] + 1 ].w;
    					b.w = pg[ p[1] + 1 ].w;
    					b = b + i[2];

    					// compute dot products between gradients and vectors
    					float4 r;
    					r[0] = dot( pg[ b[0] ].xyz, f );
    					r[1] = dot( pg[ b[1] ].xyz, f - float3(1.0f, 0.0f, 0.0f) );
    					r[2] = dot( pg[ b[2] ].xyz, f - float3(0.0f, 1.0f, 0.0f) );
    					r[3] = dot( pg[ b[3] ].xyz, f - float3(1.0f, 1.0f, 0.0f) );

    					float4 r1;
    					r1[0] = dot( pg[ b[0] + 1 ].xyz, f - float3(0.0f, 0.0f, 1.0f) );
    					r1[1] = dot( pg[ b[1] + 1 ].xyz, f - float3(1.0f, 0.0f, 1.0f) );
    					r1[2] = dot( pg[ b[2] + 1 ].xyz, f - float3(0.0f, 1.0f, 1.0f) );
    					r1[3] = dot( pg[ b[3] + 1 ].xyz, f - float3(1.0f, 1.0f, 1.0f) );

    					// interpolate
    					f = s_curve(f);
    					r = lerp( r, r1, f[2] );
    					r = lerp( r.xyyy, r.zwww, f[1] );
    					return lerp( r.x, r.y, f[0] );
					}

					// 2D version
					float noise(float2 v,
					const uniform float4 pg[FULLSIZE])
					{
    					v = v + float2(10000.0f, 10000.0f);

    					float2 i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    					float2 f = frac(v);            // fractional position

    					// lookup in permutation table
    					float2 p;
    					p[0] = pg[ i[0]   ].w;
    					p[1] = pg[ i[0]+1 ].w;
    					p = p + i[1];

    					// compute dot products between gradients and vectors
    					float4 r;
    					r[0] = dot( pg[ p[0] ].xy,   f);
    					r[1] = dot( pg[ p[1] ].xy,   f - float2(1.0f, 0.0f) );
    					r[2] = dot( pg[ p[0]+1 ].xy, f - float2(0.0f, 1.0f) );
    					r[3] = dot( pg[ p[1]+1 ].xy, f - float2(1.0f, 1.0f) );

    					// interpolate
    					f = s_curve(f);
    					r = lerp( r.xyyy, r.zwww, f[1] );
    					return lerp( r.x, r.y, f[0] );
					}

					// 1D version
					float noise(float v,
					const uniform float4 pg[FULLSIZE])
					{
    					v = v + 10000.0f;

    					float i = frac(v * NOISEFRAC) * BSIZE;   // index between 0 and BSIZE-1
    					float f = frac(v);            // fractional position

    					// compute dot products between gradients and vectors
    					float2 r;
    					r[0] = pg[i].x * f;
    					r[1] = pg[i + 1].x * (f - 1.0f);

    					// interpolate
    					f = s_curve(f);
    					return lerp( r[0], r[1], f);
					}

					//////////////////////////////////////////////////////////////

					float4x4 NoiseMatrix = {1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1};

					float Sharpness <
					float UIMin = 0.1;
					float UIMax = 5.0;
					float UIStep = 0.1;
					> = 0.8f;


					struct VS_OUTPUT
					{
    					float4 Position : POSITION;
    					float4 Diffuse	: COLOR0;
    					float4 Specular : COLOR1;
    					float2 TexCoord : TEXCOORD0;
						float  Fog      : FOG;
					};

					VS_OUTPUT main (
    				float3 Position : POSITION, 
    				float3 Normal 	: NORMAL, 
    				float2 TexCoord : TEXCOORD0
					)
					{

    					VS_OUTPUT Out = (VS_OUTPUT)0;
						//float displacement = abs(sin(6.28 * (0.01*TexCoord.y)));
						float4 noisePos = mul(Position+time*2,NoiseMatrix);
						float noiseVal =noise(noisePos.xyz, NTab);
						//noiseVal=1;
  
						//float displacement = glowThickness*(noise(noisePos.xyz, NTab) + 1.0f);
						//float displacement = glowThickness*(noise(TexCoord.xy, NTab) + 1.0f);
						//float displacement=glowThickness;

						// t : leaf height
						float t= Position.y / 12.0;

						//float displacement = 2*sin(6.2828 * (time+t));
						float displacement = max(0.01,t)*2*sin(0.5*6.2828 * (time+pow(t,1.5)));

						displacement+=noiseVal;

				
						//displacement = displacement - 0.5; // mm makes flip here 
    					//displacement = sign(displacement) * pow(displacement,Sharpness);

    					float3 N = normalize(mul(Normal, (float3x3)modelViewT));		// normal (view space)

						float3 displace =  (displacement) * N;
						//float3 displace = float3(displacement,0,0);
						//float3 displace = displacement*float3(noiseVal,0,0);

						float3 P = mul(float4(Position, 1), (float4x3)modelViewT ) + displace;  // displaced position (view space)
						Out.Position = mul(float4(P, 1), projectionT );   // projected position


						// Lighting : 
    					float3 L =  -lightDir;
    					float3 R = normalize(2 * dot(N, L) * N - L);          // reflection vector (view space)
    					float3 V = -normalize(P);                             // view direction (view space)

    					//Out.Diffuse = I_a * k_a + I_d * k_d * max(0.0f, dot(N, L)); // diffuse + ambient
    					//Out.Specular = I_s * k_s * pow(max(0, dot(R, V)), n/4);   // specular

						// two sided 
    					Out.Diffuse = I_a * k_a + I_d * k_d * abs(dot(N, L)); // diffuse + ambient
						Out.Specular = I_s * k_s * pow(abs(dot(R, V)), n/4);   // specular

						Out.TexCoord=TexCoord;

						//apply fog
						float FogStart = 1;
						float FogEnd = 500;
						float d;
    					d = length(P); //fog range 
						//d = P.z;
			    		//Out.Fog = saturate((FogEnd - d)/(FogEnd - FogStart));
						Out.Fog = 1.0-saturate(d*0.01+ 0.4*(1.0-t));   // based on distance and hight
						//Out.Diffuse.a =  saturate(0.5+0.5*t);
						//Out.Diffuse = Out.Fog;
                
    					return Out;
					}


					"
				}
			]
		}]
}


DEF DECLARATION Switch {
	whichChoice	-1 
	choice
	Shape {
		appearance	
		
		DEF LEAF-APP Appearance 
		{
    		material	Material {
    			diffuseColor	0.23 0.39 0.19
    			specularColor	0.2 0.3 0.29
 
    		}

			#texture	ImageTexture { url "../../textures/Fur.dds"}
			##transparent TRUE

			shaders  [USE ComposedShaderGlowDX11 ]



		}

		geometry	DEF leaf IndexedFaceSet {
    		coord	Coordinate {
    			point	[ 0.305 0 0,
	        		-0.044 -0.034 0.268,
	        		0.301 2.759 -0.01,
	        		-0.217 4.243 0.174,
	        		0.16 4.273 -0.045,
	        		-0.1 6.29 0.561,
	        		-0.358 7.793 0.446,
	        		0.115 7.811 0.39,
	        		-0.03 9.193 0.592,
	        		-0.067 10.008 0.615,
	        		-0.142 11.581 0.604,
	        		0 11.605 0.564,
	        		-0.054 12.247 0.689,
	        		-0.072 2.751 0.206,
	        		0.145 6.337 0.225,
	        		-0.305 9.226 0.737,
	        		-0.335 10 0.745 ]
    		}

    		coordIndex	[ 11, 10, 12, -1, 2, 1, 13, -1,
	    		2, 0, 1, -1, 13, 4, 2, -1,
	    		13, 3, 4, -1, 4, 3, 14, -1,
	    		3, 5, 14, -1, 5, 7, 14, -1,
	    		5, 6, 7, -1, 8, 6, 15, -1,
	    		8, 7, 6, -1, 9, 15, 16, -1,
	    		9, 8, 15, -1, 10, 11, 16, -1,
	    		11, 9, 16, -1 ]
    		texCoord	DEF TEX-COORD  TextureCoordinate {
    			point	[ 1 0.05173,
	        		0.47404 0,
	        		0.99481 4.21369,
	        		0.21325 6.45233,
	        		0.78222 6.49846,
	        		0.38999 9.54132,
	        		0 11.808,
	        		0.71382 11.8353,
	        		0.49494 13.9209,
	        		0.43903 15.1509,
	        		0.32522 17.5228,
	        		0.54025 17.5601,
	        		0.45922 18.528,
	        		0.4321 4.20168,
	        		0.75969 9.61156,
	        		0.08015 13.9706,
	        		0.03462 15.1382 ]
    		}

    		solid	FALSE
    		creaseAngle	3.14
    		normalIndex	[  ]
    		texCoordIndex	[ 11, 10, 12, -1, 2, 1, 13, -1,
	    		2, 0, 1, -1, 13, 4, 2, -1,
	    		13, 3, 4, -1, 4, 3, 14, -1,
	    		3, 5, 14, -1, 5, 7, 14, -1,
	    		5, 6, 7, -1, 8, 6, 15, -1,
	    		8, 7, 6, -1, 9, 15, 16, -1,
	    		9, 8, 15, -1, 10, 11, 16, -1,
	    		11, 9, 16, -1 ]
		}

	}
}

Selection {
	collide	FALSE
	select FALSE
	children
	Shape {
		appearance	USE LEAF-APP

		# this ifs gets computed 
		geometry DEF IFS-OUT IndexedFaceSet	
		{ 
			creaseAngle	3.14
	    	solid	FALSE
			coord Coordinate { }
			texCoord USE TEX-COORD 
		}
	}
}

DEF MULTI-INSTANCE Script 
{

	## create a multiple instance IndexedFaceSet 


	field SFNode srcIfs USE	leaf 
	field SFNode destIfs USE IFS-OUT


	# for compute transform 
	# place leafes on a plane 
	field SFVec3f bboxSize 100 0 100
	field SFVec3f bboxCenter 0 0 0



	url	"javascript:
	

	// append a transformed copy of IFS to out ifs 
	function addInstance(coordIn,indexIn,coordOut,indexOut,transform)
	{
		
		var vcountIn = coordIn.length;
		var vcountOut = coordOut.length;


		// transform vertices 
		coordOut.length = vcountOut+vcountIn;
	    for (var i = 0; i < vcountIn; i++) {
			coordOut[vcountOut+i] = transform.multVecMatrix(coordIn[i]);
		}

		// add copy of shifted indices 
		var icountIn = indexIn.length;
		var icountOut = indexOut.length;

		indexOut.length = icountOut+icountIn;
	    for (var i = 0; i < icountIn; i++) 
		{
			var index = indexIn[i];
			if (index>=0) index+=vcountOut; // shift if not -1 
			indexOut[icountOut+i]=index;
		}

	}
	function replicateTexCoordIndex(indexIn,indexOut)
	{
		// add copy of indices 
		var icountIn = indexIn.length;
		var icountOut = indexOut.length;

		indexOut.length = icountOut+icountIn;
	    for (var i = 0; i < icountIn; i++) 
		{
			var index = indexIn[i];
			indexOut[icountOut+i]=index;
		}
	
	}

	// compute placement matrix for leaf  
	function computeTransform(index,transform) 
	{
	  
	    var bmin = bboxCenter.subtract(bboxSize.multiply(0.5));

		var x,y,z;
		z=bmin.z + bboxSize.z * Math.random();
		y=bmin.y + bboxSize.y * Math.random();
		x=bmin.x + bboxSize.x * Math.random();
		var s = 0.9+Math.random()*0.4;

	    transform.setTransform(new SFVec3f(x,y,z), new SFRotation( 0, 1, 0, 2.0*Math.random()*Math.PI),
			new SFVec3f(s,s,s));

	}


	// produce muliple copies of srcIfs 
	function instance() 
	{

		var coordIn =  srcIfs.coord.point;
		var indexIn =  srcIfs.coordIndex;


		var coordOut =  destIfs.coord.point;
		var indexOut =  destIfs.coordIndex;
		var texCoordIndexIn =  srcIfs.texCoordIndex;
		var texCoordIndexOut =  destIfs.texCoordIndex;


	    var transform = new VrmlMatrix();

		for (var i=0; i <2000;i++) 
		{
		
			computeTransform(i,transform);
		    //transform.setTransform(new SFVec3f(0,0,0), new SFRotation( 0, 0, 1, 0));
			addInstance(coordIn,indexIn,coordOut,indexOut,transform);
			if (texCoordIndexIn.length>0) replicateTexCoordIndex(texCoordIndexIn,texCoordIndexOut);
		}

		print('result #coord ='+ coordOut.length);
			print('result #indexOut ='+ indexOut.length);

	}

	function initialize() {
		instance();
	}

	"

}

DEF	TS TimeSensor  { loop  TRUE
	cycleInterval 5 #0.5
}
#DEF	GS ScalarInterpolator { 
#	keyValue [0.02 0.1 0.02 ]
#}
#ROUTE TS.fraction_changed  TO GS.set_fraction
#ROUTE GS.value_changed  TO VertexShaderGlow.glowThickness
#ROUTE TS.fraction_changed  TO VertexShaderGlow.time
##ROUTE TS.time TO VertexShaderGlow.time

ROUTE TS.time TO ComposedShaderGlowDX9.time
ROUTE TS.time TO ComposedShaderGlowDX11.time

###############################################################

