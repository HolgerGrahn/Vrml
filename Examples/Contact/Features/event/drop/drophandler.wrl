#VRML V2.0 utf8

# Generic Drop handler
# for Contact 6.0 ++
# depending on url extension, scene is updated
# (c) Holger Grahn
###############################################################
#
################ DropHandler
#EXTERNPROTO DropHandler [
#	field SFNode root  
#	field SFNode rootShape 
#	field SFNode rootSound 

#] "drophandler.wrl"

EXTERNPROTO DeviceSensor[
	exposedField SFBool enabled	
	exposedField MFString device 
	exposedField MFString eventType 
	eventOut SFNode event
	eventOut SFBool isActive
] 
["urn:inet:bitmanagement.de:node:DeviceSensor","http://www.bitmanagement.de/vrml/protos/nodes.wrl#DeviceSensor","nodes.wrl#DeviceSensor"]



# DropHandler	{ root USE ROOT	 rootShape	USE ROOT-SHAPE }
################ Drop handler

PROTO DropHandler [
	exposedField SFBool	enabled TRUE
	
	#root Group
	field SFNode root NULL 

	#root Shaoe
	field SFNode rootShape NULL 
	
	#root Sound 
	field SFNode rootSound NULL 

	field MFString frameParameters []

]
{
	DEF	ds DeviceSensor #senses the drop event
	{
		enabled IS enabled 
		eventType "drop"
	}

	DEF inputHandler Script # checks the drop event
	{
		eventIn SFNode onEvent

		field SFNode root IS root
		field SFNode rootShape IS rootShape
		field SFNode rootSound IS rootSound

		field SFString backslash "\\"

		field SFString vrmlExtensions "wrl wrz x3d"

		field SFString movieExtensions "avi mpg mpeg rm wma wmv gif asf ogg"
		field SFString audioExtensions "wav mp3 ac3 wma"
		field SFString imageExtensions "jpg jpeg png bmp dib dds ico cur"
		field SFString shaderExtensions "vhl vsh fx"

		field SFString webbrowserExtensions "htm html swf"

		field MFString frameParameters IS frameParameters


		field SFNode target NULL


		eventIn MFNode addVrml
		eventIn MFNode addMat


		url "javascript:

		// handle the event callback 
		function onEvent(e,t)
		{

			print('Event type='+e.type+' at='+t);
			print(' button='+e.button+' shiftKey='+e.shiftKey+' ctrlKey='+e.ctrlKey+' altKey='+e.altKey);
			print(' position='+e.position+' keyCode='+e.keyCode+' ctrlKey='+e.ctrlKey+' altKey='+e.altKey);

			if (e.type == 'drop') { // ***** handle a DROP event  

				//print('Dropdata:'+e.data+',');
				//print('Droptype:'+e.dataType);
				//print('ControlKey:'+e.ctrlKey+',');


				// get index where file name starts 
				var i1 = e.data.lastIndexOf('/');
				var i2 = e.data.lastIndexOf(backslash);

				var url ='';
				var ext ='';


				if (i2>i1) i1=i2;

				// check the data type
				var worldUrl = Browser.getWorldURL();

				if (e.dataType == 'File') {// it's an local file
					url= e.data;
				}	
				else if (e.dataType == 'URL') // it's an URL dragged 
					url = e.data;
				else print('Drop:Cant deal with this yet.'); ;	// some special data like HTML Text 

				// get extension 
				i1 = e.data.lastIndexOf('.');
				if (i1>0)  {
					ext = e.data.substring(i1+1);
					ext = ext.toLowerCase();
				}


				// search what is below mouse 
				var hit = Browser.mouseSelect(e.position);
				var cone=rootShape;

				if (hit)  {
					path = hit.hitPath; // MFNode
					l= path.length;
					//print('Hit');
					while (l>0) {
						l--;
						if (path[l].getType() == 'Shape') {
							cone = path[l];				  // found nearest Shape, break
							break;
						}
					}

				}
		
				var baseUrl=Browser.getBaseURL();

				print(url);
				print(ext);
				print(baseUrl); 

				if (url.length > baseUrl.length) {
					// make url relative ?
				}

				// check extensions 
				if (vrmlExtensions.indexOf(ext) >=0) 
				{
					target = cone;
					if (e.ctrlKey)
						addInline(url);
					else 
					   Browser.createVrmlFromURL(url,Browser.getScript(),'addVrml');
			
				}
				else if ( audioExtensions.indexOf(ext) >=0) 
				{
						setAudio(rootSound,url,false);

				} else {

					// assume image ?? 
					if (cone) {
						if (imageExtensions.indexOf(ext) >=0)
							setTexture(cone,url,false);
						else if (movieExtensions.indexOf(ext) >=0)
							setTexture(cone,url,true);
						else if (shaderExtensions.indexOf(ext) >=0)
							setShader(cone,url,false);
					}
					else Browser.loadURL(url,frameParameters);
				}


				// ok done, we have handled the drop event
				e.returnValue = 0;

			}

		}

		// check node and set the texture url 
		function setTexture(node,url,isMovie) 
		{
			if (node.getType() == 'Shape') 
			{

				if (node.appearance) ;
				else node.appearance = new SFNode('Appearance{}');

				var app = node.appearance;
    			// ! gives bad op

				if (isMovie)
					app.texture = new SFNode('MovieTexture{ loop TRUE }');

				if (app.texture) ;
				else 
				if (isMovie)
					app.texture = new SFNode('MovieTexture{}');
				else app.texture = new SFNode('ImageTexture{}');
		
				var tex = app.texture;

				// check type of texture node 
				if (tex.getType() == 'MultiTexture') 
				{
					if (tex.texture.length == 0) {
						tex.texture[0] = new SFNode('ImageTexture{}');
					}
					tex = tex.texture[tex.texture.length-1];
					//print('mtex'+tex.url[0]);
				}

				tex.url[0]=url;
		
				//print('new'+tex.getType()+'url '+tex.url[0]);


			}
			else {
				// we do not know what to do 
				print('No drop action defined for '+url);
			}
		}

		// check node and set the texture url 
		function setShader(node,url,isFragment) 
		{
			if (node.getType() == 'Shape') 
			{

				if (node.appearance && node.appearance.getType() == 'ShaderAppearance') ;
				else node.appearance = new SFNode('ShaderAppearance{}');

				var app = node.appearance;
			
				if (app.vertexShader) ;
				else 
				if (isFragment)
					app.fragmentShader = new SFNode('FragmentShader{}');
				else app.vertexShader = new SFNode('VertexShader{}');
		
				var tex = app.vertexShader;

				tex.url[0]=url;
		
				//print('new'+tex.getType()+'url '+tex.url[0]);


			}
			else {
				// we do not know what to do 
				print('No drop action defined for '+url);
			}
		}

		// check node and set the texture url 
		function setAudio(node,url,isMovie) {
			print('set audio new clip'+url);
			//print(node.getType());

			if (!node) {
				node =new SFNode('Sound{}');
				rootSound = node;
				root.addChildren = new MFNode(node);
			}
			if (node && node.getType() == 'Sound') 
			{

				if (node.source) ;
				else 
				if (isMovie)
					node.source = new SFNode('MovieTexture{loop TRUE}');
				else node.source = new SFNode('AudioClip{loop TRUE}');
				tex = node.source;
				tex.url[0]=url;
				//print('new clip'+tex.url[0]);

			}
			else {
				// we do not know what to do 
				print('No drop action defined for '+url);
			}
		}


		// add some nodes to us
		function addVrml(nodes) 
		{

			var n = nodes.length;
			print('adding nodes '+n);

			if (n==0) return;

			if (target)
			if (n==1) {

				// special drop actions with prepared wrl files
				var src = nodes[0];


				if (src.getType() == 'Appearance') {
					target.appearance = src;
					return;
				}
				if (src.getType() == 'MultiTexture') {
					if (target.appearance) ;
					else target.appearance = new SFNode('Appearance{}');
					target.appearance.texture = src;
					return;
				}
				if (src.getType() == 'ImageTexture') {
					if (target.appearance) ;
					else target.appearance = new SFNode('Appearance{}');
					target.appearance.texture = src;
					return;
				}
				if (src.getType() == 'MovieTexture') {
					if (target.appearance) ;
					else target.appearance = new SFNode('Appearance{}');
					target.appearance.texture = src;
					return;
				}

				if (src.getType() == 'Material') {
					if (target.appearance) ;
					else target.appearance = new SFNode('Appearance{}');
					target.appearance.material = src;
					return;
				}


			}

			//var world = Browser.getWorld();
			//world.addChildren = nodes;

			root.addChildren = nodes;

			// if its a background lets bind it 
			for (i=0;i<n;i++) {
				if 	(nodes[i].getType() == 'Background') {
					nodes[i].set_bind = true;
					break;
				}
			}

		}
		"
	}

	ROUTE ds.event TO inputHandler.onEvent

}

