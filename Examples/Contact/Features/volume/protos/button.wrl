#VRML V2.0 utf8

EXTERNPROTO Rectangle [
	exposedField SFVec2f size
]
["urn:inet:bitmanagement.de:node:Rectangle"]

PROTO Button[
	exposedField MFString name "button name"
	exposedField SFVec3f pos 50 0 300 # x,y: offset of the line; z : offset of the button
	exposedField MFInt32	state [0,	0]				# first is ID second is state value
	eventOut MFInt32 state_out
	exposedField MFString	textures []
]
{

	DEF titleLayer Layer2D
	{
		size 1 1
		children[
			DEF ts TouchSensor	{	}
			
			Shape{
				appearance DEF TxtApp Appearance{
					material Material{
						diffuseColor 0 0 0
					}
				}
				geometry DEF titleText Text{
					fontStyle DEF textFS FontStyle {
						family "TEXT_TEXTURE"
					}
					string IS name
				}													 
			}
			
			DEF buttonTrf Transform2D
			{
				children[
					Shape {geometry DEF buttonRec Rectangle  {size 0.1 0.1}
						appearance Appearance { texture DEF ImgTex ImageTexture {} }
					}
				]
			}
		]
	}




	DEF script Script
	{
		directOutput TRUE
		exposedField MFString name IS	name
		exposedField SFVec3f pos IS	pos
		eventOut MFInt32 state_out IS	state_out
		exposedField MFInt32	state IS state
		exposedField MFString	textures IS textures

		field	SFNode textFS USE textFS
		field	SFNode titleLayer USE titleLayer
		field	SFNode titleText USE titleText
		field	SFNode buttonTrf USE	buttonTrf
		field	SFNode buttonRec USE buttonRec
		field	SFNode ImgTex USE	ImgTex


		eventIn	SFVec2f	getWindowSize
		eventIn	SFBool touch_in
		eventIn	SFBool isOver_in


		url	"javascript:

		function initialize()
		{
			Browser.addRoute(Browser, 'windowSize', Browser.getScript(), 'getWindowSize');
			getWindowSize(Browser.windowSize);
			ImgTex.url = textures[0];
		}

		function shutdown()
		{
			Browser.deleteRoute(Browser, 'windowSize', Browser.getScript(), 'getWindowSize');
		}


		function getWindowSize(val)
		{
			var x = Browser.windowSize[0];
			var y = Browser.windowSize[1];

			textFS.size = 40/x;
			titleLayer.translation[0] = -0.5 + pos[0]/x ;
			titleLayer.translation[1] = pos[1]/y ;

			buttonTrf.translation[0] = pos[2]/x;
			buttonTrf.translation[1] = 10/x;

			titleText.string = name; // update the node
			buttonRec.size = new SFVec2f(1.5*textFS.size, 1.5*textFS.size);

		}


		function touch_in(val)
		{
			if (val==1)
			{
				ImgTex.url = textures[2];
				state[1] = 1;
				state_out = state;
			}
			else
			{
				ImgTex.url = textures[1];
				state[1] = 0;
				state_out = state;
			}
		}


		function isOver_in(val)
		{
			if (val == 1) // not checked
				ImgTex.url = textures[1];
			else
				ImgTex.url = textures[0];
		}


		function pos(val)
		{
			var x = Browser.windowSize[0];
			var y = Browser.windowSize[1];

			titleLayer.translation[0] = -0.5 + pos[0]/x ;
			titleLayer.translation[1] = pos[1]/y ;
		}


		"
	}

	ROUTE	ts.isActive	TO script.touch_in
	ROUTE	ts.isOver	TO script.isOver_in
}


Background
{
	skyColor 1 1 1
}

Button { textures ["slider_plus.png", "slider_plus_over.png", "slider_plus_pushed.png"]}

