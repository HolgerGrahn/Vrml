#VRML V2.0 utf8


DEF WorldInfo WorldInfo {
	title "ImageGrid"
	info [ 
		"Grid of photos generated from external X3D file treated as playlist"
		"(C) 2006 Holger Grahn for BSContact"
	]


}


EXTERNPROTO MetadataSet[
	exposedField SFNode metadata
	exposedField SFString name
	exposedField SFString reference
	exposedField MFNode value
]
["urn:inet:bitmanagement.de:node:MetadataSet","http://www.bitmanagement.de/vrml/protos/nodes.wrl#MetadataSet","nodes.wrl#MetadataSet"]
EXTERNPROTO MetadataString[
	exposedField SFNode metadata
	exposedField SFString name
	exposedField SFString reference
	exposedField MFString value
]
["urn:inet:bitmanagement.de:node:MetadataString","http://www.bitmanagement.de/vrml/protos/nodes.wrl#MetadataString","nodes.wrl#MetadataString"]


EXTERNPROTO Rectangle[
	exposedField SFVec2f size
]
["urn:inet:bitmanagement.de:node:Rectangle","http://www.bitmanagement.de/vrml/protos/nodes.wrl#Rectangle","nodes.wrl#Rectangle"]

EXTERNPROTO Fog2[
	exposedField SFColor color
	exposedField SFString fogType
	exposedField SFFloat visibilityRange
	exposedField SFFloat visibilityStart
	exposedField SFFloat density
	exposedField SFBool radial
	eventIn SFBool set_bind
	eventOut SFBool isBound
]
["urn:inet:bitmanagement.de:node:Fog2","http://www.bitmanagement.de/vrml/protos/nodes.wrl#Fog2","nodes.wrl#Fog2"]


EXTERNPROTO KeySensor[
	exposedField SFBool eventsProcessed
	exposedField SFBool enabled
	eventOut SFBool isActive
	eventOut SFInt32 keyPress
	eventOut SFInt32 keyRelease
	eventOut SFInt32 actionKeyPress
	eventOut SFInt32 actionKeyRelease
	eventOut SFBool shiftKey_changed
	eventOut SFBool controlKey_changed
	eventOut SFBool altKey_changed
	eventOut SFString character
]
["urn:inet:bitmanagement.de:node:KeySensor","http://www.bitmanagement.de/vrml/protos/nodes.wrl#KeySensor","nodes.wrl#KeySensor"]


EXTERNPROTO Layer3D[
	exposedField SFVec3f bboxSize
	exposedField SFVec3f bboxCenter
	eventIn MFNode addChildrenLayer
	eventIn MFNode removeChildrenLayer
	exposedField MFNode childrenLayer
	exposedField SFVec2f translation
	exposedField SFInt32 depth
	exposedField SFVec2f size
	exposedField SFNode background
	exposedField SFNode fog
	exposedField SFNode navigationInfo
	exposedField SFNode viewpoint
	exposedField MFNode children
	eventIn MFNode addChildren
	eventIn MFNode removeChildren
]
["urn:inet:bitmanagement.de:node:Layer3D","http://www.bitmanagement.de/vrml/protos/nodes.wrl#Layer3D","nodes.wrl#Layer3D"]

EXTERNPROTO Selection [
	exposedField SFVec3f bboxSize
	exposedField SFVec3f bboxCenter
	exposedField SFBool collide
	exposedField SFBool select
	exposedField SFNode proxy
	exposedField MFNode children
	eventIn MFNode addChildren
	eventIn MFNode removeChildren
]
["urn:inet:bitmanagement.de:node:Selection","http://www.bitmanagement.de/vrml/protos/nodes.wrl#Selection","nodes.wrl#Selection"]
EXTERNPROTO ImageTextureLOD[
	exposedField SFBool repeatS
	exposedField SFBool repeatT
	exposedField MFString url
	exposedField SFVec2f maxSize
	exposedField SFNode loadingTexture
	eventIn SFBool set_unload
	exposedField MFString parameter
	exposedField SFBool thumbEnabled
	exposedField SFVec2f thumbSize
	exposedField SFNode thumbTexture
	exposedField SFBool showThumb
	eventOut SFBool isLoaded
	eventOut SFVec2f size
	eventOut SFFloat aspect
]
["urn:inet:bitmanagement.de:node:ImageTextureLOD","http://www.bitmanagement.de/vrml/protos/nodes.wrl#ImageTextureLOD","nodes.wrl#ImageTextureLOD"]


# translate 4 times 
PROTO T4 [
	field SFVec3f bboxSize -1 -1 -1
	field SFVec3f bboxCenter 0 0 0
	field MFNode children []
	field SFVec3f scale 1 1 1
]
{
	Group {
		children [
			Transform {
				bboxSize IS bboxSize
				bboxCenter IS bboxCenter
				children IS children
				translation 50 0 50
				scale IS scale
			}
			Transform {
				bboxSize IS bboxSize
				bboxCenter IS bboxCenter
				children IS children
				translation -50 0 50
				scale IS scale
			}
			Transform {
				bboxSize IS bboxSize
				bboxCenter IS bboxCenter
				children IS children
				translation 50 0 -50
				scale IS scale
			}
			Transform {
				bboxSize IS bboxSize
				bboxCenter IS bboxCenter
				children IS children
				translation -50 0 -50
				scale IS scale
			}
		]
	}
}


## ui
EXTERNPROTO C3D_PlaneXY [
	field SFBool solid
	exposedField MFColor color
]
"protolib/C3D_PlaneXY_1.00.wrl#C3D_PlaneXY"

EXTERNPROTO C3D_Toggle [
	eventIn SFTime toggleTime
	exposedField SFBool toggle
	exposedField MFNode trueChildren
	exposedField MFNode falseChildren
]
"protolib/C3D_Toggle_1.01.wrl#C3D_Toggle"

EXTERNPROTO C3D_GuiMomentaryButton [
	field MFString label
	field SFString toolTip
	eventOut SFTime touchTime
	eventOut SFBool isActive
	eventOut SFBool isOver
	eventOut MFString label_changed
	eventOut MFString toolTip_changed
	eventOut SFTime repeatTime_changed
	exposedField SFBool repeat
	exposedField SFTime repeatInterval
	exposedField SFBool enabled
	exposedField SFNode texture
	exposedField SFNode sound
	exposedField SFFloat width
	exposedField SFNode fontStyle
	exposedField SFFloat height
	exposedField SFFloat transparency
]
"protolib/C3D_GuiMomentaryButton_1.04.wrl#C3D_GuiMomentaryButton"

#EXTERNPROTO C3D_GuiIcon [
#	exposedField SFBool enabled
#	exposedField SFNode texture
#	exposedField SFNode sound
#	exposedField SFBool isOn
#	exposedField SFBool isOver
#	exposedField SFBool isActive
#]
#"protolib/C3D_GuiIcon_1.03.wrl#C3D_GuiIcon"

EXTERNPROTO C3D_GuiHud [
	exposedField MFNode topLeftChildren
	exposedField MFNode topCenterChildren
	exposedField MFNode topRightChildren
	exposedField MFNode centerLeftChildren
	exposedField MFNode centerCenterChildren
	exposedField MFNode centerRightChildren
	exposedField MFNode bottomLeftChildren
	exposedField MFNode bottomCenterChildren
	exposedField MFNode bottomRightChildren
	exposedField SFBool illuminate
	exposedField SFFloat fixedAspect
]
"protolib/C3D_GuiHud_1.02.wrl#C3D_GuiHud"


#EXTERNPROTO C3D_Fader [
#	exposedField SFBool fadeOn
#	exposedField SFBool invert
#	exposedField SFBool easeInOut
#	exposedField SFTime fadeOnDuration
#	exposedField SFTime fadeOffDuration
#	eventOut SFFloat fraction_changed
#]
#"protolib/C3D_Fader_1.02.wrl#C3D_Fader"

#EXTERNPROTO C3D_GuiHelpText [
#	eventIn MFString set_string
#	exposedField SFBool isOn
#	exposedField SFTime fadeOnDuration
#	exposedField SFTime fadeOffDuration
#	exposedField SFNode fontStyle
#	exposedField SFColor color
#]
#"protolib/C3D_GuiHelpText_1.04.wrl#C3D_GuiHelpText"



PROTO VideoIcon [
	field MFString name []

	field MFString videoUrl []
	#	exposedField SFFloat size .08
	exposedField SFVec3f translation 0 0 0
	exposedField SFVec3f scale 1 1 1
	exposedField SFColor color 1 1 1
	exposedField SFFloat transparency 0.2
	exposedField SFBool on TRUE

	exposedField SFNode texture ImageTexture { url "maps/gui_button_background.png" }

	eventOut SFTime	touchTime 
	eventOut MFString videoUrl_changed

	field SFString toolTip ""
]
{
	C3D_Toggle {
		toggle IS on
		trueChildren [
			DEF xfrm Transform {
				translation	IS translation
				scale IS scale
				children Billboard {
					axisOfRotation 0 0 0
					children [
						DEF button C3D_GuiMomentaryButton {
							texture	IS texture
							transparency IS	transparency
							touchTime IS touchTime
							toolTip	 IS	toolTip
						}
					]
				}
			}
		]
	}

	DEF	scr Script {

		eventIn	SFTime touchTime
		
		field MFString videoUrl IS videoUrl

		eventOut MFString videoUrl_changed IS videoUrl_changed
	
		directOutput TRUE

		url	"javascript:

		function touchTime() {
			videoUrl_changed = videoUrl;
		
		}
		"
	}

	ROUTE button.touchTime TO scr.touchTime
}

Layer3D {
	size 0.5 0.2
	translation	0.25 0.01
	children [
		DEF BUTTON_PREV VideoIcon {
			on TRUE
			translation	-0.75 -0 0
			scale 0.5 0.5 0.5
			toolTip	"previous"
			texture ImageTexture { url "maps/icon_grey_left.png" }

		}

		DEF BUTTON_NEXT VideoIcon {
			on TRUE
			translation	0 0 0
			scale 0.5 0.5 0.5
			toolTip	"next"
			texture ImageTexture { url "maps/icon_grey_right.png" }

		}

		DEF BUTTON_UP VideoIcon {
			on TRUE
			translation	0.75 0 0
			scale 0.5 0.5 0.5
			toolTip	"next"
			texture ImageTexture { url "maps/icon_grey_up.png" }

		}
		DEF BUTTON_SLIDE_SHOW VideoIcon {
			on TRUE
			translation	1.5 0 0
			scale 0.5 0.5 0.5
			toolTip	"Slide Show"
			texture ImageTexture { url "maps/icon_grey_right2.png" }

		}
	]}


Background {
	backUrl		"../../Contact/Features/textures/background/panosky/pano_sky_3_512.jpg"
	bottomUrl	"../../Contact/Features/textures/background/panosky/pano_sky_6_16.png"
	frontUrl	"../../Contact/Features/textures/background/panosky/pano_sky_1_512.jpg"
	leftUrl		"../../Contact/Features/textures/background/panosky/pano_sky_4_512.jpg"
	rightUrl	"../../Contact/Features/textures/background/panosky/pano_sky_2_512.jpg"
	topUrl		"../../Contact/Features/textures/background/panosky/pano_sky_5_512.jpg"
}

DEF background Background {
	skyColor 0 0 0.1
	leftUrl "../textures/starstr.gif"	
	rightUrl "../textures/starstr.gif"	
	backUrl "../textures/starstr.gif"	
	frontUrl "../textures/starstr.gif"	
	topUrl "../textures/starstr.gif"	
	bottomUrl "../textures/starstr.gif"	
}

NavigationInfo {
	type [ "FLY" "WALK" "ANY" ]
	headlight TRUE
	avatarSize [0.5 1.75, 0.75 ]	
	#visibilityLimit 200
	speed 5
}

#Fog2 {
#	fogType "LINEAR"
#	visibilityRange 300
#	color	0.3 0.3 0.5

#	visibilityStart 150


#}

DEF ENTRY-VP Viewpoint {
	position 0 0 200
	fieldOfView	1
	description "entry"
}

PROTO Thumbnail[
	exposedField SFInt32 id  -1
	exposedField MFString href []
	exposedField MFString src  []
	exposedField SFString alt  ""
	exposedField SFString title	""
	exposedField SFString name	""
	exposedField SFString category ""

	exposedField SFVec2f size 1 1	
	exposedField SFNode metadata NULL

	eventOut	 SFInt32	on_click_id		# on click returns id 
	]
{
		Anchor { 
			url	IS href
			description	IS name 
			children 	[
				DEF TS TouchSensor	{ 
					# touchTime IS on_click
					# description IS description  # in X3D
				}
				Shape {
					appearance 
							Appearance {
								texture	
								ImageTexture { 
									url IS src 
									repeatS	FALSE repeatT FALSE
								}
							}
					geometry Rectangle { size IS size }
				}
			]
		}

  	# on click return  on_click_id
	DEF	S Script {
		eventIn	SFTime touchTime
		eventOut SFInt32 on_click_id IS	on_click_id
		exposedField SFInt32 id IS id
		url	"javascript:
		function touchTime(t) { on_click_id = id; }
		"
	}
	ROUTE TS.touchTime TO S.touchTime
}

PROTO ImageViewer [
	exposedField SFInt32 id -1

	exposedField SFInt32 whichChoice 0
	exposedField MFString url []			# url of image 
	exposedField SFVec2f size 1 1			# to fill from Image aspect ratio 
	exposedField SFNode	thumbTexture NULL
	exposedField SFBool	showThumb FALSE ##TRUE

	exposedField SFNode	metadata NULL		# the meta data from XML 

	exposedField SFString	description		""
	eventOut	 SFTime		on_click
	eventOut	 SFInt32	on_click_id		# on click returns id 
]
{
	Switch {
		#whichChoice	0
		whichChoice IS whichChoice 
		choice 
		#Anchor ?
		Group { children
			[
				DEF TS TouchSensor	{ 
					touchTime IS on_click
					description IS description  # in X3D
				}
				Shape {
					appearance 
			
					LOD	{
						#range [ 15 , 150 ]
						range [ 10 , 50 ]
						level [
						   Appearance {
								texture	
				
								ImageTextureLOD { 
									url IS url 
									repeatS	FALSE repeatT FALSE
									parameter ["subtexture"  ]
							
									showThumb IS showThumb
									thumbTexture IS thumbTexture
			  								
								}
							}
							## Thumbnail texture
					
							Appearance { 
								#material Material { transparency 0.5 }
								texture	IS thumbTexture
							}
							## just transparent 
							Appearance { 
								material Material { transparency 0.7 }
							}

						]
					}
					geometry Rectangle { size IS size }
				}
	
			]
		}
	}
	# on click return  on_click_id
	DEF	S Script {
		eventIn	SFTime touchTime
		eventOut SFInt32 on_click_id IS	on_click_id
		exposedField SFInt32 id IS id
		url	"javascript:
		function touchTime(t) { on_click_id = id; }
		"
	}
	ROUTE TS.touchTime TO S.touchTime
}

PROTO VideoViewer [
	exposedField SFInt32 id -1

	exposedField SFInt32 whichChoice 0
	exposedField MFString url []
	exposedField SFVec2f size 1 1 # too fill from Image aspect ratio 
	exposedField SFNode	thumbTexture NULL

	exposedField SFNode	metadata NULL # the meta data from XML 

	exposedField SFString	description		""
	eventOut	 SFTime	on_click

]
{
	Switch {
		#whichChoice	0
		whichChoice IS whichChoice 
		choice 
		#Anchor ?
		Shape {
			appearance 
			
			LOD	{
				range [ 5 , 50 ]
				level [


					Appearance {
						texture	
				
						MovieTexture { 
							url IS url 
							repeatS	FALSE repeatT FALSE
							loop  TRUE
							startTime 0 
							parameter ["subtexture"]

							## loop TRUE 					startTime 0
						}
					}
					## Thumbnail texture
					
					Appearance { 
						material Material { transparency 0.5 }
						texture	IS thumbTexture
					}
					## just transparent 
					Appearance { 
						material Material { transparency 0.7 }
					}

				]
			}
			geometry Rectangle { size IS size }
		}
	}
}



#DEF Encloser Collision {  # don't walk outside 
#	collide TRUE
#	proxy 
#	   ##Box { size 215 65 215 }
#		IndexedFaceSet {
#		solid FALSE
#		coord Coordinate {point [
#				-115 -32.5 -115,-115 32.5 -115,115 32.5 -115,115 -32.5 -115,
#				115 -32.5 -115,115 32.5 -115,115 32.5 115,115 -32.5 115,
#				115 -32.5 115,115 32.5 115,-115 32.5 115,-115 -32.5 115,
#				-115 -32.5 115,-115 32.5 115,-115 32.5 -115,-115 -32.5 -115,
#				115 32.5 115,115 32.5 -115,-115 32.5 -115,-115 32.5 115,
#				115 -32.5 -115,115 -32.5 115,-115 -32.5 115,-115 -32.5 -115]}
#		coordIndex [
#			0,1,2,3,
#			-1,4,5,6,
#			7,-1,8,9,
#			10,11,-1,12,
#			13,14,15,-1,
#			16,17,18,19,
#			-1,20,21,22,
#			23,-1]

#	}
#}

Switch {
	whichChoice	0
	choice
	Collision {
		collide FALSE
		children  [ 
			DEF Root Group { } 
			#Shape {
			#	geometry DEF gridIls IndexedLineSet { ## will be computed by script
			#	coord DEF gridCoord Coordinate { }
			#}}
		]
	}
}
#
#	Script building an "Layout" of nodes in 3D
#   and handling basic next prev navigation 
#

DEF Layouter Script
{
	directOutput TRUE
	field SFNode root USE Root	# group to place generated object

	
	# layout interface 
	
	field MFNode	items []	# the list of items 

	eventIn	SFInt32 setMaxItem  # set the maximum number of items in layout 

	eventIn	SFString addUrlItem
	eventIn	SFNode	addItem		# add a new item with item interface

	field SFInt32	currentItem -1

	field SFInt32	selectedItem 0  

	field SFBool	stateViewAll TRUE	# if viewing the whole layout from outside

	eventIn	SFTime	navigateNext		# navigate to next
	eventIn	SFTime	navigatePrev
	eventIn	SFTime	navigateAll			# navigate to view all 
	eventIn	SFInt32	navigateItem		# go to item # index 
	eventIn	SFTime	shuffle				# randomize list order 
	eventIn	SFTime	clear				# clear item list 

	eventOut SFNode	selectedItemChanged	# sends item changed by navigation 


	field SFInt32 maxItemCount 1

	# internal to layout 
	# this places objects in a 3D grid 
	
	field MFNode particleObjects [ 
		Group {
			children [
				NULL # DEF TOUCH TouchSensor	{ }
				Selection { 
					select FALSE 
					children 
					Shape { geometry Box { size 3 3 3} 
						appearance Appearance {
							material Material {
								diffuseColor 0.7 0.7  0.7
								transparency 0.75
	    					}				
							##texture ImageTexture { url "../textures/redpat1blur.png" }
                    		##textureTransform DEF tx TextureTransform { }						
						}		
					}			
				}	
				#				LOD	{
				#					range [30 ]
				#					level [
				#						Billboard {
				#							children
				#							Transform {
				#								translation	 0 0.7 0 
				#								children DEF AV Avatar	{ whichChoice 0 isAvatar FALSE }
				#							}
				#						}
				#						NULL ## Group {}
				#					]
				#				}
			]
		}				
	]
	field MFNode  particles []
	

	field SFInt32 uDimension 5
	field SFInt32 vDimension 5
	field SFInt32 wDimension 5
	
	
	field SFVec3f bboxSize 100 -100 -100
	field SFVec3f bboxCenter 0 0 0

	field SFVec3f scale 9 9 9

	##field SFNode gridIls USE gridIls	# the ILS for visualization 




	url "javascript:

	function clear(t) 
	{
		currentItem = -1;
		items.length=0;
		var target=	root.children;
		var l = target.length;
		for (var i=0; i<l;i++) {
			target[currentItem].children[3]=null;
		}

	}

	function navigateItem(index) 
	{

		var target=	root.children;

		if (stateViewAll) 
		{
			stateViewAll = false;
		}
		selectedItem = index;
		navigateSelectedItem();
	}


	function navigateSelectedItem() 
	{

		var target=	root.children;

		var n=target[selectedItem].children[3];


		var pos = new SFVec3f();
		var ori = new SFRotation();

		Browser.getViewpointByValue(pos,ori);
		//print(pos);

		pos = target[selectedItem].translation;
		pos.z-=5.0;

		//Browser.setViewpointByValue(pos,ori);

		//Browser.setViewpointByNode(n);
		Browser.setViewpointByNode(n,1.0,new SFVec3f(0,0,0),1.1,true,1.0);
		selectedItemChanged = n;
	}

	function navigateNext() 
	{

		if (stateViewAll) 
		{
			stateViewAll = false;
			if (selectedItem <0) selectedItem = 0;
		}
		else selectedItem = selectedItem +1;

		var target=	root.children;

		if (selectedItem >= target.length)
			selectedItem = 0;

		if (target[selectedItem].children.length <4)
			selectedItem = 0;
	
		navigateSelectedItem();


	}

	function navigatePrev() 
	{
		if (stateViewAll) 
		{
			stateViewAll = false;
		}	
		else selectedItem = selectedItem -1;

		var target=	root.children;
		if (selectedItem <0)
			selectedItem = target.length-1;

		if (selectedItem >= target.length)
			selectedItem = 0;

		if (target[selectedItem].children.length <4)
			selectedItem = 0;
	
		navigateSelectedItem();


	}

	function navigateAll() 
	{  	
	
		if (stateViewAll) {
			stateViewAll = false;
			// navigate back to current item
			navigateSelectedItem();

		} else {
			var n=root;
			Browser.setViewpointByNode(n,1.2,new SFVec3f(0,0,0),1.4,true,2.0);
			stateViewAll = true;
			//Browser.setViewpointByNode(n);
		}

	}


	function addUrlItem(u) 
	{

		var n;
		//n = new SFNode('ImageViewer');
		n = Browser.createVrmlFromString('ImageViewer { }')[0];

		n.url[0]=u;

		//print(n);
		addItem(n);

	}

	function addItem(n) 
	{
		currentItem++;
	
		var target=	root.children;
		currenItem = 0;
	
		n.id = currentItem;
		items[currentItem]=n;

		if (currentItem < target.length)
			target[currentItem].children[3]=n;

	}

	// swap two items and their ids
	function shuffle2(a,b) 
	{
		var target=	root.children;
		var n =  target[a].children[3];
		var m =  target[b].children[3];
		var id1=n.id;
		n.id = m.id;
		m.id=id1;
		target[a].children[3]=m;
		target[b].children[3]=n;

	}
	// shuffle the item list a bit
	function shuffle(t) 
	{

		var target=	root.children;
		var l=target.length-1;
		var n= 20;

		while (n>0) 
		{
			var a = Math.random()*l;
			var b = Math.random()*l;
			if (a!=b) shuffle2(a,b);
			n=n-1;

		}

	}

	/// re-create grid which max content maxCount 
	function setMaxItem(maxCount) 
	{

		//return;

		uDimension=2;
		vDimension=2;
		wDimension=2;

		var total =  uDimension * vDimension  * wDimension;


		print(total);

		if (1) 
			while (total < maxCount) 
		{

			uDimension=uDimension*2;
			vDimension=vDimension*2;
			wDimension=wDimension*2;
			total =  uDimension * vDimension  * wDimension;
			print(total);

		};
		print(uDimension);
		return;
		var pts;
		pts = computeGridCoord(uDimension,vDimension,wDimension);

		root.set_children = particles; // add all particles to root
		particles.length=0;
		currentItem = -1;

	}
	
	// compute equal spaced 3D grid coordinates, based on bbox
	function computeGridCoord(nu,nv,nw) 
	{ var u,v,w;
		var x,y,z;
	
		var bmin = bboxCenter.subtract(bboxSize.multiply(0.5));
	
		var pts = new MFVec3f();
		var ptsi=0;
	
		pts.length = nw*nv*nu;
	
		for(w=0; w<nw;w++) {
			z=bmin.z + bboxSize.z * w/(nw-1);
			for(v=0; v<nv;v++) {
				y=bmin.y + bboxSize.y * v/(nv-1);
				for(u=0; u<nu;u++) {
					x=bmin.x + bboxSize.x * u/(nu-1);
					pts[ptsi] = new SFVec3f(x,y,z);
	
					particles[ptsi]=new SFNode('Transform {}');
					particles[ptsi].set_children = particleObjects[0].children;
					particles[ptsi].set_translation = pts[ptsi];
					particles[ptsi].set_scale = scale;
					ptsi++;
	
				}
			}
		}
		return pts;
	}  
	
	// computed coordIndex for 3D grid ILS
	function computeGridLines(nu,nv,nw) 
	{ var u,v,w;
	
		var ind = new MFInt32();
		var ptsi=0;
		var indi=0;
	
		ind.length = nw*nv*(nu+1);
	
		for(w=0; w<nw;w++) {
			ptsi=w*(nv*nu);
			for(v=0; v<nv;v++) {
				for(u=0; u<nu;u++) {
					ind[indi++] = ptsi;
					ptsi++;
				}
				ind[indi++] = -1;
			}
			ptsi=w*(nv*nu);
	
			for(u=0; u<nu;u++) {
				ptsi=w*(nv*nu)+u;
				for(v=0; v<nv;v++) {
	
					ind[indi++] = ptsi;
					ptsi+=nu;
				}
				ind[indi++] = -1;
			}
	
		}

		ptsi=w*(nv*nu);
		for(v=0; v<nv;v++) {
			for(u=0; u<nu;u++) {
				for(w=0; w<nw;w++) {
					ptsi=w*(nv*nu)+v*nu+u;
					ind[indi++] = ptsi;
				}	
				ind[indi++] = -1;
			}
		}
	
		return ind;
	}  
	
	// setup everything 
	function initialize() {
		var u,v,w;
		u = uDimension;
		v = vDimension;
		w = wDimension;
		var pts;
	
		pts = computeGridCoord(u,v,w);

		root.set_children = particles; // add all particles to root

		maxItemCount =particles.length;

		particles.length=0;
	
		//gridIls.coord.set_point = pts;
		//gridIls.set_coordIndex = computeGridLines(u,v,w);
	}		

	"
	
}

#DEF LayouterCircle Script
#{
#	directOutput TRUE
#	field SFNode root USE Root	# group to place generated object

	
#	# layout interface 
	
#	field MFNode	items []	# the list of items 

#	eventIn	SFInt32 setMaxItem  # set the maximum number of items in layout 

#	eventIn	SFString addUrlItem
#	eventIn	SFNode	addItem		# add a new item with item interface

#	field SFInt32	currentItem -1

#	field SFInt32	selectedItem 0  

#	field SFBool	stateViewAll TRUE	# if viewing the whole layout from outside

#	eventIn	SFTime	navigateNext		# navigate to next
#	eventIn	SFTime	navigatePrev
#	eventIn	SFTime	navigateAll			# navigate to view all 
#	eventIn	SFInt32	navigateItem		# go to item # index 
#	eventIn	SFTime	shuffle				# randomize list order 
#	eventIn	SFTime	clear				# clear item list 

#	eventOut SFNode	selectedItemChanged	# sends item changed by navigation 


#	field	 SFInt32 maxItemCount 64

#	# internal to layout 
#	# this places objects in a 3D grid 
	
#	field MFNode particleObjects [ 
#		Group {
#			children [
#			]
#		}				
#	]
#	field MFNode  particles []

#	field SFFloat  radius 100
	
   	
#	field SFVec3f bboxSize 100 -100 -100
#	field SFVec3f bboxCenter 0 0 0

#	field SFVec3f scale 9 9 9



#	url "javascript:

#	function clear(t) 
#	{
#		currentItem = -1;
#		items.length=0;
#		var target=	root.children;
#		var l = target.length;
#		for (var i=0; i<l;i++) {
#			target[currentItem].children[3]=null;
#		}

#	}

#	function navigateItem(index) 
#	{

#		var target=	root.children;

#		if (stateViewAll) 
#		{
#			stateViewAll = false;
#		}
#		selectedItem = index;
#		navigateSelectedItem();
#	}


#	function navigateSelectedItem() 
#	{

#		var target=	root.children;

#		var n=target[selectedItem].children[3];


#		var pos = new SFVec3f();
#		var ori = new SFRotation();

#		Browser.getViewpointByValue(pos,ori);
#		//print(pos);

#		pos = target[selectedItem].translation;
#		pos.z-=5.0;

#		//Browser.setViewpointByValue(pos,ori);

#		//Browser.setViewpointByNode(n);
#		Browser.setViewpointByNode(n,1.0,new SFVec3f(0,0,0),1.1,true,1.0);
#		selectedItemChanged = n;
#	}

#	function navigateNext() 
#	{

#		if (stateViewAll) 
#		{
#			stateViewAll = false;
#			if (selectedItem <0) selectedItem = 0;
#		}
#		else selectedItem = selectedItem +1;

#		var target=	root.children;

#		if (selectedItem >= target.length)
#			selectedItem = 0;

#		if (target[selectedItem].children.length <4)
#			selectedItem = 0;
	
#		navigateSelectedItem();


#	}

#	function navigatePrev() 
#	{
#		if (stateViewAll) 
#		{
#			stateViewAll = false;
#		}	
#		else selectedItem = selectedItem -1;

#		var target=	root.children;
#		if (selectedItem <0)
#			selectedItem = target.length-1;

#		if (selectedItem >= target.length)
#			selectedItem = 0;

#		if (target[selectedItem].children.length <4)
#			selectedItem = 0;
	
#		navigateSelectedItem();


#	}

#	function navigateAll() 
#	{  	
	
#		if (stateViewAll) {
#			stateViewAll = false;
#			// navigate back to current item
#			navigateSelectedItem();

#		} else {
#			var n=root;
#			Browser.setViewpointByNode(n,1.2,new SFVec3f(0,0,0),1.4,true,2.0);
#			stateViewAll = true;
#			//Browser.setViewpointByNode(n);
#		}

#	}


#	function addUrlItem(u) 
#	{

#		var n;
#		//n = new SFNode('ImageViewer');
#		n = Browser.createVrmlFromString('ImageViewer { }')[0];

#		n.url[0]=u;

#		//print(n);
#		addItem(n);

#	}

#	function addItem(n) 
#	{
#		currentItem++;
	
#		var target=	root.children;
#		currenItem = 0;
	
#		n.id = currentItem;
#		items[currentItem]=n;

#		if (currentItem < target.length)
#			target[currentItem].children[3]=n;

#	}

#	// swap two items and their ids
#	function shuffle2(a,b) 
#	{
#		var target=	root.children;
#		var n =  target[a].children[3];
#		var m =  target[b].children[3];
#		var id1=n.id;
#		n.id = m.id;
#		m.id=id1;
#		target[a].children[3]=m;
#		target[b].children[3]=n;

#	}
#	// shuffle the item list a bit
#	function shuffle(t) 
#	{

#		var target=	root.children;
#		var l=target.length-1;
#		var n= 20;

#		while (n>0) 
#		{
#			var a = Math.random()*l;
#			var b = Math.random()*l;
#			if (a!=b) shuffle2(a,b);
#			n=n-1;

#		}

#	}

#	/// re-create grid which max content maxCount 
#	function setMaxItem(maxCount) 
#	{

	
#		return;
#		var pts;
#		pts = computeGridCoord(maxCount);

#		root.set_children = particles; // add all particles to root
#		particles.length=0;
#		currentItem = -1;

#	}
	
#	// compute equal spaced 3D grid coordinates, based on bbox
#	function computeGridCoord(nitems) 
#	{ 
#		var w;
#		var x,y,z;
	
#		var bmin = bboxCenter.subtract(bboxSize.multiply(0.5));
	
#		var pts = new MFVec3f();
#		var ptsi=0;
	
#		pts.length = nitems;

#		var a=-Math.PI;
#		var da = (2.0*Math.PI) / nitems;

#		y=0.0;

	
#		for(w=0; w<nitems;w++) 
#		{

#			x = radius * Math.cos(a);
#			z = radius * Math.sin(a);

#			pts[ptsi] = new SFVec3f(x,y,z);

#			var n= new SFNode('Transform {}');
	
#			particles[ptsi]= n;
#			n.set_translation = pts[ptsi];
#			n.set_scale = scale;
#			n.set_rotation = new SFRotation(0,1,0,a-Math.PI*0.5);

#			n.set_children = particleObjects[0].children;
#			ptsi++;

#			a=a+da;
	
#		}
	
#		return pts;
#	}  
	

	
#	// setup everything 
#	function initialize() 
#	{

#		var pts;
	
#		pts = computeGridCoord(maxItemCount);

#		root.set_children = particles; // add all particles to root

#		maxItemCount =particles.length;

#		particles.length=0;
	
#	}		

#	"
	
#}

ROUTE BUTTON_PREV.touchTime TO Layouter.navigatePrev
ROUTE BUTTON_NEXT.touchTime TO Layouter.navigateNext
ROUTE BUTTON_UP.touchTime TO Layouter.navigateAll

#DEF S_tx Script {
#	directOutput TRUE
#	field SFNode tx USE tx		# the

#	eventIn SFFloat anim
#	url "javascript:
#	function anim(f) {
#			tx.translation.x = f;			
#			//tx.rotation = Math.PI*Math.sin(2.0*f*Math.PI);
#	}	
#	"


#}
#ROUTE TS.fraction_changed TO S_tx.anim

DEF Viewpoint2 Viewpoint {
	fieldOfView 1.0
	orientation 0 0 1 0
	position 0 0 107
	description "Viewpoint2"
}		  

# the XML encoded list of media items
DEF MEDIA_LIST Inline {
	url "PhotosAll.x3d"
	#url "index.x3d"
	#url "0fotos.x3d"
	#url	"Thumbnail.x3d"
	##url	"listing.x3d" 
	#url	"California.x3d" 
	#url	"MediaTest1.x3d" 
	
}

# handler for navigation  
DEF KS KeySensor 
{


}
#slide show timer 
DEF	TS TimeSensor 
{
	startTime -2
	stopTime -1
	loop TRUE
	cycleInterval 3.0

}

DEF MEDIA_NAVIGATOR Script 
{


	eventIn SFString character 

	eventIn SFNode selectedItemChanged

	eventIn	SFBool  mediaLoaded

	directOutput TRUE
	field SFNode layout USE Layouter 
	field SFNode mediaList USE MEDIA_LIST

	field SFNode KS USE KS 
	field SFNode TS USE TS 

	field SFNode currentItem NULL

	field SFBool slideShowRandom TRUE

	eventIn	SFTime slideShow # start slide show
	eventIn	SFTime slideShowNext

	field SFNode currentItemPrev NULL

	## item with ID id clicked 
	eventIn SFInt32 on_click_id
	

	url	"javascript:

	function getMetaData(list, tag) 
	{

		var num = list.length;
		for (var i=0;i<num;i++) 
		{
			if (list[i].name == tag)
				return list[i];
		}
		return false;


	}

	function selectedItemChanged(item,t) 
	{

		// switch back to thumb mode 
		if (currentItemPrev  && currentItemPrev != item) 
		{
			currentItemPrev.showThumb = true;
		}
		if (currentItem && currentItem != item) 
		{
			//currentItem.showThumb = true;
			currentItemPrev = currentItem;
		}


		if (item.metadata) 
		{

			var s;
			var des='';
			s=getMetaData(item.metadata.value,'Title');
			if (s) {
				des+='Title:'+s.value[0];
			}
			s=getMetaData(item.metadata.value,'Ref');
			if (s) {
				des+=' Url:'+s.value[0];
			}
			Browser.setDescription(des);
		}
		item.showThumb = false; // show real 
		currentItem = item;
	}	

	function character(ch,t)
	{
    	var returnValue= false;
		trace(ch);

		if (ch == 'n' || ch == 'N') {
			layout.navigateNext = t;
		}
		else if (ch == 'b' || ch == 'B') {
			layout.navigatePrev = t;
		}
		else if (ch == 'a' || ch == 'A') {
			layout.navigateAll = t;
		}
		else if (ch == 'r' || ch == 'R') {
			layout.shuffle = t;
		}
		else if (ch == 's' || ch == 'S') {
			if (TS.isActive)
				slideShowStop(t);
			else slideShowStart(t);
		}
		else 
		{
        	returnValue = true;
		}

    	KS.returnValue= returnValue;

    
	}
	function slideShow(t) 
	{
		if (TS.isActive)
			slideShowStop(t);
		else slideShowStart(t);
	}
	function slideShowStart(t) 
	{
		TS.set_startTime = Browser.getTime();

	}
	function slideShowStop(t) 
	{
		TS.set_stopTime = Browser.getTime();

	}
	function slideShowNext(t) 
	{

		// print('SLIDE next:'+t);
		if (slideShowRandom) 
		{
			var l= Math.random()*(layout.maxItemCount-1);
			layout.navigateItem = l;
		} else {
			layout.navigateNext = t;
		}

	}
	function on_click_id(id,t) {
		print('on_click_id:'+id);

		//if already current go next 
		if (currentItem && currentItem.id == id)  {
			layout.navigateNext = t;
		}	
		else layout.navigateItem = id;
	}

	"


}
ROUTE BUTTON_SLIDE_SHOW.touchTime TO MEDIA_NAVIGATOR.slideShow

ROUTE KS.character TO MEDIA_NAVIGATOR.character
ROUTE Layouter.selectedItemChanged TO MEDIA_NAVIGATOR.selectedItemChanged

ROUTE TS.cycleTime TO MEDIA_NAVIGATOR.slideShowNext

# handler for the loaded media list 
DEF MEDIA_LIST_LOADED Script 
{

	eventIn	SFBool  mediaLoaded

	directOutput TRUE
	field SFNode layout USE Layouter 
	field SFNode mediaList USE MEDIA_LIST
	field SFNode mediaNavigator USE MEDIA_NAVIGATOR

	field SFString base "http://labo-3d.com/phpwebgallery/"

	url	"javascript:

	function getMetaData(list, tag) 
	{

		var num = list.length;
		for (var i=0;i<num;i++) 
		{
			if (list[i].name == tag)
				return list[i];
		}
		return false;


	}

	function mediaLoaded(flag,t) 
	{


	
		if (!flag) {
			Browser.print('Could not load media XML list:'+mediaList.url);
			return;
		}	

		var list  = mediaList.children;
		var num= list.length;

		Browser.print('got media list '+flag+' Num top level Elements='+num);

		var maxCount = layout.maxItemCount;

		layout.setMaxItem = num;
		if (num>maxCount)	{
			num = maxCount; 
			needScroll=true;
		}

		addPlayList(list);
	}


	function addPlayList(list)
	{

	  	var num= list.length;
		// parse the playlist 

		for (var i=0;i<num;i++) 
		{
			var item=list[i];

			var type = item.getType();

			// Browser.print('Got a ' +type);

			if (type == 'Group') 
			{
				// sub group 
				addPlayList(item.children);

			}
			else 
			if (type == 'Thumbnail') 
			{
				var n = Browser.createVrmlFromString('Thumbnail {}')[0];

				if (n) {
					// copy fields 

					n.href[0]=base+item.href[0];
					n.src[0]=base+item.src[0];
					n.title=item.title;
					n.metadata=item.metadata;
					if (item.Aspect >= 1.0) { n.size.x = 1.0;	n.size.y = 1.0/item.Aspect; }
					else { n.size.x = item.Aspect;	n.size.y = 1.0; }
					layout.addItem = n;

					// add route if click on item 
					Browser.addRoute(n,'on_click_id',mediaNavigator,'on_click_id');
				}		
			} else 
			if (type == 'media' || type == 'Anchor') 
			{
				
				var srcUrl;
				var description='';

				if (type == 'media')
					srcUrl = item.src;
				else 
					srcUrl = item.url[0];

				// Browser.print('   url=' +srcUrl);

				// Browser.print('   meta=' +item.metadata);

				if (item.metadata) 
				{

					var mediaType='Image';
					var Aspect = 1.0;

					var s;
					s=getMetaData(item.metadata.value,'Ref');
					if (s) {
						srcUrl = s.value[0];
					}
					s=getMetaData(item.metadata.value,'MediaType');
					if (s) {
						mediaType = s.value[0];
					}	
					s=getMetaData(item.metadata.value,'Description');
					if (s) {
						description = s.value[0];
					}
					else {
						s=getMetaData(item.metadata.value,'Title');
						if (s) {
							description = s.value[0];
						}

					}
					s=getMetaData(item.metadata.value,'Aspect');
					if (s) {
						Aspect = parseFloat(s.value[0]);
						//print(Aspect);
					}	
					s=getMetaData(item.metadata.value,'RectangleSize');
					//if (s) 
					if (true) 
					{
						// print(s);
						// create new node representing the media item 
						var n = Browser.createVrmlFromString(mediaType+'Viewer { }')[0];

						if (n) {
							n.url[0]=srcUrl;
							if (s) n.size = s.value[0];
							else {
								
								if (Aspect >= 1.0) { n.size.x = 1.0;	n.size.y = 1.0/Aspect; }
								else { n.size.x = Aspect;	n.size.y = 1.0; }
							}	
							n.metadata = item.metadata;

							//&twg_type=small
							s=getMetaData(item.metadata.value,'ThumbRef');
							if (s) {
								var tn = new SFNode('ImageTexture{}');
								tn.url[0]=s.value[0];
								tn.repeatS=false; tn.repeatT=false;
								n.thumbTexture = tn;
								n.url[1]=s.value[0];
							}

							n.description = description;

							//continue;
							//print(n);
							layout.addItem = n;

							// add route if click on item 
							Browser.addRoute(n,'on_click_id',mediaNavigator,'on_click_id');
						}
						continue;


					}		
					

				}		
				else {
					layout.addUrlItem = srcUrl;
				}	

			}
			else if (type == 'Entry') 
			{
				var l=item.children;
				for (var j=0; j<l.length;j++) 
				{
					var litem = l[j];
					var t= litem.getType();
					if (t == 'Ref') {
						var srcUrl = litem.href;
						Browser.print('   url=' +srcUrl);
						layout.addUrlItem = srcUrl;
					}
				}

			}

		}

	}
	"


}

ROUTE MEDIA_LIST.isLoaded TO MEDIA_LIST_LOADED.mediaLoaded


DEF INIT Script {
	directOutput TRUE

	field SFNode layout USE Layouter 
	field SFNode mediaList USE MEDIA_LIST
	field SFNode mediaListLoaded USE MEDIA_LIST_LOADED

	eventIn	SFString setMediaListUrl 

	url	"javascript:
	function initialize()
	{
		//Browser.setOption('recenterMouseOnUp','true');
		// limit image size 
        Browser.setOption('maxTextureSize', '2048');   // 1024'
        Browser.setOption('useDX9ImageReader', 'true');

		//Browser.setOption('viewpointAnimationDuration', duration);
        var browser= Browser.getName(); 
		var version= Browser.getVersion(); 
		if (browser== 'blaxxunCC3D' && parseFloat(version)>= 7.02) {
		} else {
			Browser.print('Need BSContact 7.02 at least');
			trace (browser);
			trace (version);

		}	


       
	}
	function shutdown() {
	}
	function setMediaListUrl(s,t) 
	{
		// trigger load of new url 
		mediaList.url= new MFString(s);
	}	
	
	"
}